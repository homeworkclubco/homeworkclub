---
import config from '../content/config/config.json'
// import HeaderLink from "./HeaderLink.astro";
// import IconLink from "./react/IconLink";
import AccessibleIcon from '../components/common/AccessibleIcon.astro'
import Logo from '/public/images/homework-club-logo-colour-dark.svg'
import { Image } from 'astro:assets'
import { Icon } from 'astro-icon/components'

if (!config || !config.header || !config.header.nav) {
  throw new Error('Navigation data is missing or incomplete')
}

const links = config.header.nav
const currentPath = Astro.url.pathname
---

<header class="navbar">
  <a href="#main" class="skip-link">Skip to main content</a>

  <div class="container">
    <div class="header-start">
      <a class="logo" href="/" title="Go to homepage">
        <Image src={Logo} alt="Logo" />
      </a>
    </div>
    <div class="headerEnd">
      <nav class="mainNav" aria-label="Main Navigation">
        <button
          id="menuToggle"
          aria-expanded="false"
          aria-controls="navMenu"
          aria-label="Open navigation menu"
        >
          <AccessibleIcon label="Open Menu">
            <Icon name="ph:list" />
          </AccessibleIcon>
        </button>
        <div
          id="navMenu"
          class="navOverlay"
          role="dialog"
          aria-modal="true"
          aria-label="Navigation menu"
          data-state="closed"
        >
          <div class="navContent">
            <button id="closeMenu" aria-label="Close navigation menu">
              <AccessibleIcon label="Close navigation menu">
                <Icon name="ph:x" />
              </AccessibleIcon>
            </button>
            <ul role="list" class="navContent__list">
              {
                links.map((link) => (
                  <li class="navContent__item" role="listitem">
                    <a
                      href={link.link}
                      aria-current={currentPath === link.link ? 'page' : undefined}
                      target={link.target || '_self'}
                      class="navContent__link"
                    >
                      {link.title}
                    </a>
                  </li>
                ))
              }
            </ul>
          </div>
        </div>
      </nav>
    </div>

    <!-- <nav>
    <h2><a href="/">{config.seo.title}</a></h2>
    <div class="internal-links">
      {config.nav.map((nav) => <NavbarLink href={nav.link}>{nav.title}</NavbarLink>)}
    </div>
    <div class="social-links">
      {
        config?.contactLinks?.map((link) => {
          return <IconLink {...link} />;
        })
      }
    </div>
  </nav> -->
  </div>
</header>

<style>
  @import '../styles/variables/breakpoints.css';

  header {
    position: fixed;
    z-index: 999;
    width: 100%;
    width: calc(100vw - var(--section-padding) * 2);
    left: var(--section-padding);
    top: var(--section-padding);

    .container {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-block: var(--section-padding);
    }
  }

  .logo {
    display: flex;

    img {
      height: var(--step-3);
      width: auto;
    }
  }

  #menuToggle,
  #closeMenu {
    --_size: var(--step-4);
    --_color: var(--color-text-secondary);
    --_color-hover: var(--color-text-accent);

    color: var(--color);
    background: none;
    border: none;
    border-radius: var(--radius-rounded);
    font-size: var(--step-2);
    width: var(--_size);
    height: var(--_size);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: 0.3s all var(--easing);

    &:hover,
    &:focus {
      color: var(--_color-hover);
    }

    @media (--sm) {
      display: none;
    }
  }

  #closeMenu {
    --_color: var(--accent-3);
    --_color-hover: var(--white);
    align-self: flex-end;
  }

  .navOverlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;

    &[data-state='closed'] {
      animation: fadeOutDown 0.3s forwards;

      @media (--sm) {
        animation: unset;
      }
    }

    &[data-state='open'] {
      display: flex;
      animation: fadeInUp 0.3s forwards;

      @media (--sm) {
        animation: unset;
      }
    }

    @media (--sm) {
      display: block;
      position: static;
      background: none;
    }
  }

  @keyframes fadeInUp {
    from {
      transform: translateY(100px);
      opacity: 0;
    }

    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes fadeOutDown {
    from {
      transform: translateY(0);
      opacity: 1;
    }

    to {
      transform: translateY(100px);
      opacity: 0;
    }
  }

  .navContent {
    background: var(--color-accent);
    color: var(--accent-200);
    padding: var(--space-m);
    width: 100vw;
    height: 100%;
    margin-left: auto;
    display: flex;
    flex-direction: column;

    @media (--sm) {
      padding: 0;
      max-width: none;
      width: auto;
      height: auto;
      background: none;
    }
  }

  .navContent__list {
    list-style: none;
    padding: 0;
    flex-grow: 1;
    display: flex;
    justify-content: end;
    flex-direction: column;
    gap: var(--space-l);

    @media (--sm) {
      flex-direction: row;
      margin: 0;
    }
  }

  .navContent__link {
    --_padding: var(--space-2xs);

    color: var(--accent-3);
    font-size: var(--step-5);
    font-weight: var(--font-weight-medium);
    display: block;
    padding: 0 var(--_padding);
    margin: calc(var(--_padding) * -1);
    transition: 0.3s all var(--easing);
    text-decoration: none;

    &:hover,
    &:focus {
      @media (--md) {
        color: var(--color-text-accent);
      }
    }

    &[aria-current='page'] {
      color: var(--white);

      @media (--sm) {
        color: var(--color-text);
      }
    }

    @media (--sm) {
      color: var(--color-text-secondary);
      font-size: var(--step-0);

      &:hover,
      &:focus {
        color: var(--color-text-accent);
      }
    }
  }

  /* Boring stuff */

  .headroom {
    /* will-change: transform; */
    background-color: rgba(0, 0, 0, 0);
    top: var(--section-padding);

    transition:
      transform 0.3s var(--easing),
      background-color 0.3s var(--easing);
  }

  body:not(.nav-open) {
    .headroom--pinned {
      left: 0;
      width: 100vw;
      transform: translateY(0%);
    }
  }

  .headroom--unpinned {
    transform: translateY(calc(-100% - var(--section-padding)));
  }

  .headroom--not-top {
    background-color: var(--neutral-100);
    top: 0;
    border-bottom: 2px solid var(--neutral-200);
  }

  .skip-link {
    position: absolute;
    top: -100px;
    left: 0;
    background: #000;
    color: white;
    padding: 8px;
    z-index: 100;
    font-size: var(--step-0);

    &:focus {
      top: 0;
    }
  }
</style>

<script>
  import Headroom from '../scripts/headroom'

  document.addEventListener('astro:page-load', () => {
    const header = document.querySelector('.navbar')
    var headroom = new Headroom(header, {
      offset: {
        up: 100,
        down: 200,
      },
      // scroll tolerance in px before state changes
      tolerance: 5,
    })
    headroom.init()
  })
</script>

<script>
  document.addEventListener('astro:page-load', () => {
    const menuToggle = document.getElementById('menuToggle')
    const closeMenu = document.getElementById('closeMenu')
    const navMenu = document.getElementById('navMenu')
    const focusableElements = navMenu?.querySelectorAll('button, a')

    function openMenu() {
      if (!menuToggle || !navMenu || !closeMenu) return

      menuToggle.setAttribute('aria-expanded', 'true')
      // navMenu.style.display = "block";
      navMenu.dataset.state = 'open'
      document.body.style.overflow = 'hidden'
      document.body.classList.add('nav-open')
      closeMenu.focus()
    }

    function closeMenuFunc() {
      if (!menuToggle || !navMenu) return

      menuToggle.setAttribute('aria-expanded', 'false')
      // navMenu.style.display = "none";
      navMenu.dataset.state = 'closed'
      document.body.style.overflow = ''
      document.body.classList.remove('nav-open')
      menuToggle.focus()
    }

    function handleKeyDown(event: KeyboardEvent) {
      if (!focusableElements) return

      if (event.key === 'Escape') {
        closeMenuFunc()
      } else if (event.key === 'Tab') {
        const firstFocusableElement = focusableElements[0] as HTMLElement
        const lastFocusableElement = focusableElements[focusableElements.length - 1] as HTMLElement

        if (!event.shiftKey && document.activeElement === lastFocusableElement) {
          event.preventDefault()
          firstFocusableElement.focus()
        } else if (event.shiftKey && document.activeElement === firstFocusableElement) {
          event.preventDefault()
          lastFocusableElement.focus()
        }
      }
    }

    menuToggle?.addEventListener('click', openMenu)
    closeMenu?.addEventListener('click', closeMenuFunc)
    navMenu?.addEventListener('keydown', handleKeyDown)

    navMenu?.addEventListener('click', (event) => {
      if (event.target === navMenu) {
        closeMenuFunc()
      }
    })

    window.addEventListener('resize', () => {
      if (!navMenu || !menuToggle) return

      if (window.innerWidth > 768) {
        // navMenu.style.display = "";
        navMenu.dataset.state = 'open'
        document.body.style.overflow = ''
      } else if (menuToggle.getAttribute('aria-expanded') === 'false') {
        // navMenu.style.display = "none";
        navMenu.dataset.state = 'closed'
      }
    })
  })
</script>
